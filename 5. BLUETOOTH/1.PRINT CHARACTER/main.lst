   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  69               	.global	usart_init
  71               	usart_init:
  73               	.Ltext1:
   1:usart.h       **** //Micricontroller		:All 8-bit AVR Micricontrollers with Similar Register Configuration with ATmega1
   2:usart.h       **** //System Clock			:8 MHz
   3:usart.h       **** //Header File Version 		:1.1
   4:usart.h       **** //Author			:Arun Kumar Garg 
   5:usart.h       **** //				:ABLab Solutions
   6:usart.h       **** //				:www.ablab.in
   7:usart.h       **** //				:arun@ablab.in
   8:usart.h       **** //Date				:1st August 2011
   9:usart.h       **** 
  10:usart.h       **** /*Copyright (c) 2011 ABLab Solutions All rights reserved.
  11:usart.h       **** Redistribution and use in source and binary forms, with or without modification, are permitted prov
  12:usart.h       **** 
  13:usart.h       ****    * Redistributions of source code must retain the above copyright notice, this list of conditions
  14:usart.h       ****    * Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  15:usart.h       ****      and/or other materials provided with the distribution.
  16:usart.h       ****    * Neither the name of the copyright holders nor the names of contributors may be used to endorse
  17:usart.h       ****      specific prior written permission.
  18:usart.h       **** 
  19:usart.h       **** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPL
  20:usart.h       **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  ARE DISCLAIMED. IN NO EVENT SHA
  21:usart.h       **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
  22:usart.h       **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRA
  23:usart.h       **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMA
  24:usart.h       **** 
  25:usart.h       **** 
  26:usart.h       **** /*The functions and macros defined in this header file are for USART of all 8-bit AVR Micricontroll
  27:usart.h       **** with ATmega 16*/
  28:usart.h       **** 
  29:usart.h       **** #ifndef	_USART_H_
  30:usart.h       **** #define	_USART_H_ 	1
  31:usart.h       **** 
  32:usart.h       **** 
  33:usart.h       **** 
  34:usart.h       **** #include<avr/io.h>
  35:usart.h       **** #include<util/delay.h>
  36:usart.h       **** 
  37:usart.h       **** 
  38:usart.h       **** 
  39:usart.h       **** /*The function is declared to initialize the USART with following cinfiguration:-
  40:usart.h       **** USART mode - Asynchronous
  41:usart.h       **** Baud rate - 9600
  42:usart.h       **** Data bits - 8
  43:usart.h       **** Stop bit - 1
  44:usart.h       **** Parity - No parity.*/
  45:usart.h       **** 
  46:usart.h       **** void usart_init();
  47:usart.h       **** 
  48:usart.h       **** 
  49:usart.h       **** 
  50:usart.h       **** 
  51:usart.h       **** /*The function is declared to transmit data.*/
  52:usart.h       **** 
  53:usart.h       **** void usart_data_transmit(unsigned char data );
  54:usart.h       **** 
  55:usart.h       **** 
  56:usart.h       **** 
  57:usart.h       **** 
  58:usart.h       **** /*The function is declared to receive data.*/
  59:usart.h       **** 
  60:usart.h       **** unsigned char usart_data_receive( void );
  61:usart.h       **** 
  62:usart.h       **** 
  63:usart.h       **** 
  64:usart.h       **** 
  65:usart.h       **** /*The function is declared to transmit string.*/
  66:usart.h       **** 
  67:usart.h       **** void usart_string_transmit(char *string);
  68:usart.h       **** 
  69:usart.h       **** 
  70:usart.h       **** 
  71:usart.h       **** 
  72:usart.h       **** /*The function is declared to receive string.*/
  73:usart.h       **** 
  74:usart.h       **** char *usart_string_receive(char *receive_string,unsigned char terminating_character);
  75:usart.h       **** 
  76:usart.h       **** 
  77:usart.h       **** 
  78:usart.h       **** /*Function defination*/
  79:usart.h       **** 
  80:usart.h       **** void usart_init()
  81:usart.h       **** {
  74               	me size = 0 */
  76               	.LM1:
  77               		out 64-32,__zero_reg__
  82:usart.h       **** UBRRH = 0;
  79               	
  80               		ldi r24,lo8(2)
  81 0000 10BC      		out 41-32,r24
  83:usart.h       **** UBRRL =2;
  82               	stabn	68,0,84,.LM3-.LFBB1
  83               	.LM3:
  84 0002 82E0      		sbi 43-32,1
  84:usart.h       **** UCSRA |=(1<<U2X);
  86               	:
  87               		in r24,42-32
  88 0006 599A      		ori r24,lo8(24)
  85:usart.h       **** UCSRB|= (1<<RXEN)|(1<<TXEN);
  89               	t 42-32,r24
  91 0008 8AB1      	.LM5:
  92 000a 8861      		in r24,64-32
  93 000c 8AB9      		ori r24,lo8(-122)
  86:usart.h       **** UCSRC |= (1 << URSEL)|(3<<UCSZ0);
  94               	64-32,r24
  95               	/* epilogue start */
  97 0010 8668      	.LM6:
  98 0012 80BD      		ret
  87:usart.h       **** }
 100               	e1:
 103               	.global	usart_data_transmit
 105               	usart_data_transmit:
 107               	.LM7:
 108               	.LFBB2:
 109               	/* prologue: function */
  88:usart.h       **** 
  89:usart.h       **** 
  90:usart.h       **** void usart_data_transmit(unsigned char data )
  91:usart.h       **** {
 110               	ize = 0 */
 111               	.L4:
 113               	.LM8:
 114               		sbis 43-32,5
 115               		rjmp .L4
  92:usart.h       **** while ( !( UCSRA & (1<<UDRE)) )
 116               	n	68,0,94,.LM9-.LFBB2
 117               	.LM9:
 118 0016 5D9B      		out 44-32,r24
 119 0018 00C0      	.LBB28:
  93:usart.h       **** ;
  94:usart.h       **** UDR = data;
 120               	29:
 121               	.LBB30:
 122 001a 8CB9      	.LBB31:
 124               	.Ltext2:
 126               	.LM10:
 127               		ldi r24,lo8(3000)
 128               		ldi r25,hi8(3000)
   1:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   5:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
   8:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  11:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      distribution.
  15:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  16:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  20:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  32:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  34:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  37:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  39:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \file */
  40:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \code
  42:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     \endcode
  44:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  45:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  53:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  60:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  61:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  62:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  63:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  64:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** #endif
  68:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  69:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  71:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     register.
  76:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  77:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     can be achieved.
  79:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** */
  80:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
  81:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
  83:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	);
  89:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** }
  90:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  91:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  93:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     counter register pair.
  98:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 
  99:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h ****  */
 102:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** void
 103:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** {
 105:c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 129               	/
 130               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 131 001c 88EB      		1: sbiw r24,1
 132 001e 9BE0      		brne 1b
 133               	 ;  0 "" 2
 134               	/* epilogue start */
 135 0020 0197      	/* #NOAPP */
 136 0022 01F4      	.LBE31:
 137               	.LBE30:
 138               	.LBE29:
 139               	.LBE28:
 141               	.Ltext3:
 143               	.LM11:
 144               		ret
  95:usart.h       **** _delay_ms(1);
  96:usart.h       **** }
 146               		"usart_data_receive:F(0,11)",36,0,0,usart_data_receive
 147               	.global	usart_data_receive
 149               	usart_data_receive:
 151               	.LM12:
 152               	.LFBB3:
 153               	/* prologue: function */
 154               	/* frame size = 0 */
  97:usart.h       **** 
  98:usart.h       **** unsigned char usart_data_receive( void )
  99:usart.h       **** {
 155               	abn	68,0,100,.LM13-.LFBB3
 156               	.LM13:
 157               		sbis 43-32,7
 158               		rjmp .L8
 160               	.LM14:
 100:usart.h       **** while ( !(UCSRA & (1<<RXC)) )
 161               	art_data_receive:
 163 0026 5F9B      	.LM12:
 164 0028 00C0      	.LFBB3:
 101:usart.h       **** ;
 102:usart.h       **** return UDR;
 165               	sart_data_transmit
 166               	.Lscope2:
 168               	.global	usart_data_receive
 103:usart.h       **** }
 169               	pe	usart_data_receive, @function
 170               	usart_data_receive:
 172               	.LM12:
 173               	.LFBB3:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	.L8:
 178               	.LM13:
 104:usart.h       **** 
 105:usart.h       **** void usart_string_transmit(char *string)
 106:usart.h       **** {
 179               	global	usart_data_receive
 181               	usart_data_receive:
 183               	.LM12:
 184 002e FC01      	.LFBB3:
 185               	/* prologue: function */
 186               	/* frame size = 0 */
 187               	.L8:
 189               	.LM13:
 190               		sbis 43-32,7
 191               		rjmp .L8
 193               	.LM14:
 194               		in r24,44-32
 195 0030 28EB      	/* epilogue start */
 197 0034 00C0      	.LM15:
 198               		ret
 200               	.Lscope3:
 203               	.global	usart_string_transmit
 205               	usart_string_transmit:
 207 0036 5D9B      	.LM16:
 208 0038 00C0      	.LFBB4:
 209               	/* prologue: function */
 210               	/* frame size = 0 */
 107:usart.h       **** while(*string)
 108:usart.h       **** {
 109:usart.h       **** usart_data_transmit(*string++);
 211               	BB34:
 212               	.LBB35:
 213 003a 3196      	.LBB36:
 214               	.LBB37:
 216               	.Ltext4:
 218 003c 8CB9      	.LM17:
 219               		ldi r18,lo8(3000)
 220               		ldi r19,hi8(3000)
 221               		rjmp .L12
 222               	.L15:
 223               	.LBE37:
 224               	.LBE36:
 225               	.LBE35:
 226               	.LBE34:
 228               	.Ltext5:
 230 0040 0197      	.LM18:
 231 0042 01F4      		sbis 43-32,5
 232               		rjmp .L15
 233               	.LBE33:
 234               	.LBE32:
 236               	.LM19:
 237               		adiw r30,1
 238               	.LBB43:
 239               	.LBB42:
 241               	.LM20:
 242               		out 44-32,r24
 243               	.LBB41:
 244               	.LBB40:
 245 0044 8081      	.LBB39:
 246 0046 8823      	.LBB38:
 248               	.Ltext6:
 110:usart.h       **** }
 111:usart.h       **** }
 249               	.LM20:
 250               		out 44-32,r24
 251 004a 0895      	.LBB41:
 252               	.LBB40:
 253               	.LBB39:
 254               	.LBB38:
 256               	.Ltext6:
 258               	.LM21:
 259               		movw r24,r18
 112:usart.h       **** 
 113:usart.h       **** char *usart_string_receive(char *receive_string,unsigned char terminating_character)
 114:usart.h       **** {
 261               	.Ltext6:
 263               	.LM21:
 264               		movw r24,r18
 265 004c 9C01      	/* #APP */
 266               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 267               		1: sbiw r24,1
 268 004e 90E0      		brne 1b
 269               	 ;  0 "" 2
 270               	/* #NOAPP */
 271               	.L12:
 272               	.LBE38:
 273               	.LBE39:
 274               	.LBE40:
 275 0050 5F9B      	.LBE41:
 276 0052 00C0      	.LBE42:
 277               	.LBE43:
 279 0054 8CB1      	.Ltext7:
 281               	.LM22:
 115:usart.h       **** 	unsigned char temp=0x00;
 116:usart.h       **** 	for(unsigned char i=0;;i++)
 117:usart.h       **** 	{
 118:usart.h       **** 		*(receive_string+i)=usart_data_receive();
 282               	L12:
 283               	.LBE38:
 284 0056 F901      	.LBE39:
 285 0058 E90F      	.LBE40:
 286 005a F11D      	.LBE41:
 287 005c 8083      	.LBE42:
 119:usart.h       **** 		if(*(receive_string+i)==terminating_character)
 288               	gcc/../../avr/include/util/delay_basic.h" 1
 289               		1: sbiw r24,1
 290 005e 8617      		brne 1b
 291 0060 01F0      	 ;  0 "" 2
 120:usart.h       **** 			break;
 121:usart.h       **** 		else
 122:usart.h       **** 		temp++;
 292               	4
 293               	.LM21:
 294 0062 9F5F      		movw r24,r18
 295 0064 00C0      	/* #APP */
 296               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 297               		1: sbiw r24,1
 123:usart.h       **** 	}
 124:usart.h       **** 	*(receive_string+temp)='\0';
 298               	n	68,0,105,.LM21-.LFBB4
 299               	.LM21:
 300 0066 1082      		movw r24,r18
 125:usart.h       **** 	return receive_string;
 126:usart.h       **** }
 302               	.Ltext6:
 304               	.LM21:
 305 006a 0895      		movw r24,r18
 306               	/* #APP */
 307               	 ;  105 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 308               		1: sbiw r24,1
 309               		brne 1b
 310               	 ;  0 "" 2
 311               	/* #NOAPP */
 312               	.L12:
 313 0000 4E53 4F43 	.LBE38:
 313      2034 2E30 
 313      0A0D 00
 314               	.LBE39:
 315               	.LBE40:
 316               	.LBE41:
 317               	.LBE42:
 318               	.LBE43:
 320               	.Ltext7:
   1:main.c        **** #include<avr/io.h>
   2:main.c        **** #include<util/delay.h>
   3:main.c        **** #include "usart.h"
   4:main.c        **** 
   5:main.c        **** void main()
   6:main.c        **** {
 321               	24,1
 322               		brne 1b
 323               	 ;  0 "" 2
 324 006c CF93      	/* #NOAPP */
 325 006e DF93      	.L12:
 326               	.LBE38:
 327               	.LBE39:
   7:main.c        **** 
   8:main.c        **** usart_init();
 328               	05 "c:/winavr-20100110/lib/gcc/../../avr/include/util/delay_basic.h" 1
 329               		1: sbiw r24,1
 330 0070 0E94 0000 		brne 1b
 331               	 ;  0 "" 2
 332               	/* #NOAPP */
 333               	.L12:
 334               	.LBE38:
 335               	.LBE39:
 336               	.LBE40:
 337               	.LBE41:
 338               	.LBE42:
 339 0074 C0E3      	.LBE43:
 341               	.Ltext7:
 343               	.LM22:
 344               		ld r24,Z
 345               		tst r24
 346               		brne .L15
 347               	/* epilogue start */
   9:main.c        **** 
  10:main.c        **** while(1){
  11:main.c        **** usart_string_transmit("NSOC 4.0\n\r");
 348               	stabs	"usart.h",132,0,0,.Ltext7
 349               	.Ltext7:
 351 007a 90E0      	.LM22:
 352 007c 0E94 0000 		ld r24,Z
 353               		tst r24
 354               		brne .L15
 355               	/* epilogue start */
 357               	.LM23:
 358               		ret
 360               	.Lscope4:
 364 0082 0197      	.global	usart_string_receive
 366               	usart_string_receive:
 368 0086 00C0      	.LM24:
 369               	.LFBB5:
 370               	/* prologue: function */
 371               	/* frame size = 0 */
 372               		movw r18,r24
 374               	.LM25:
 375               		ldi r25,lo8(0)
 376               	.L23:
 377               	.LBB44:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:2      *ABS*:0000003f __SREG__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:3      *ABS*:0000003e __SP_H__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:4      *ABS*:0000003d __SP_L__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:5      *ABS*:00000034 __CCP__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:6      *ABS*:00000000 __tmp_reg__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:7      *ABS*:00000001 __zero_reg__
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:71     .text:00000000 usart_init
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:109    .text:00000016 usart_data_transmit
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:154    .text:00000026 usart_data_receive
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:178    .text:0000002e usart_string_transmit
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:259    .text:0000004c usart_string_receive
C:\Users\ADMIN\AppData\Local\Temp/ccK8becm.s:318    .text:0000006c main

UNDEFINED SYMBOLS
__do_copy_data
