
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  000002b4  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000009fc  00000000  00000000  0000033c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a20  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  7a:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <cmd>:
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
  82:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	82 bb       	out	0x12, r24	; 18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	88 eb       	ldi	r24, 0xB8	; 184
  8a:	9b e0       	ldi	r25, 0x0B	; 11
  8c:	fc 01       	movw	r30, r24
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <cmd+0xc>
_delay_ms(1);
PORTD=0x00;
  92:	12 ba       	out	0x12, r1	; 18
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <cmd+0x12>
_delay_ms(1);
}
  98:	08 95       	ret

0000009a <data>:
void data(unsigned char a)
{
PORTB=a;
  9a:	88 bb       	out	0x18, r24	; 24
PORTD=0x05;
  9c:	85 e0       	ldi	r24, 0x05	; 5
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	28 eb       	ldi	r18, 0xB8	; 184
  a2:	3b e0       	ldi	r19, 0x0B	; 11
  a4:	c9 01       	movw	r24, r18
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <data+0xc>
_delay_ms(1);
PORTD=0x01;
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	c9 01       	movw	r24, r18
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <data+0x16>
_delay_ms(1);
}
  b4:	08 95       	ret

000000b6 <main>:
void main()
{
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	cd b7       	in	r28, 0x3d	; 61
  c0:	de b7       	in	r29, 0x3e	; 62
  c2:	67 97       	sbiw	r28, 0x17	; 23
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	f8 94       	cli
  c8:	de bf       	out	0x3e, r29	; 62
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	cd bf       	out	0x3d, r28	; 61
char t[3];
int e=555;
DDRB=0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	87 bb       	out	0x17, r24	; 23
DDRD=0xff;
  d2:	81 bb       	out	0x11, r24	; 17
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
  d4:	8c e0       	ldi	r24, 0x0C	; 12
  d6:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	92 bb       	out	0x12, r25	; 18
  dc:	28 eb       	ldi	r18, 0xB8	; 184
  de:	3b e0       	ldi	r19, 0x0B	; 11
  e0:	f9 01       	movw	r30, r18
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x2c>
_delay_ms(1);
PORTD=0x00;
  e6:	12 ba       	out	0x12, r1	; 18
  e8:	f9 01       	movw	r30, r18
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x34>
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
  f2:	92 bb       	out	0x12, r25	; 18
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x40>
_delay_ms(1);
PORTD=0x00;
  fa:	12 ba       	out	0x12, r1	; 18
  fc:	f9 01       	movw	r30, r18
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x48>
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 106:	92 bb       	out	0x12, r25	; 18
 108:	f9 01       	movw	r30, r18
 10a:	31 97       	sbiw	r30, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x54>
_delay_ms(1);
PORTD=0x00;
 10e:	12 ba       	out	0x12, r1	; 18
 110:	f9 01       	movw	r30, r18
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x5c>
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
 116:	88 e3       	ldi	r24, 0x38	; 56
 118:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 11a:	92 bb       	out	0x12, r25	; 18
 11c:	c9 01       	movw	r24, r18
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x68>
_delay_ms(1);
PORTD=0x00;
 122:	12 ba       	out	0x12, r1	; 18
 124:	c9 01       	movw	r24, r18
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x70>
cmd(0x0C);
cmd(0x01);
cmd(0x80);
cmd(0x38);

itoa(e,t,10);
 12a:	8b e2       	ldi	r24, 0x2B	; 43
 12c:	92 e0       	ldi	r25, 0x02	; 2
 12e:	be 01       	movw	r22, r28
 130:	6f 5f       	subi	r22, 0xFF	; 255
 132:	7f 4f       	sbci	r23, 0xFF	; 255
 134:	4a e0       	ldi	r20, 0x0A	; 10
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	0e 94 13 01 	call	0x226	; 0x226 <itoa>
char s[10]="welcome";
 13c:	de 01       	movw	r26, r28
 13e:	14 96       	adiw	r26, 0x04	; 4
 140:	e0 e6       	ldi	r30, 0x60	; 96
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	88 e0       	ldi	r24, 0x08	; 8
 146:	01 90       	ld	r0, Z+
 148:	0d 92       	st	X+, r0
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x90>
 14e:	1d 86       	std	Y+13, r1	; 0x0d
 150:	1c 86       	std	Y+12, r1	; 0x0c
char d[10]="1,2,3";
 152:	de 01       	movw	r26, r28
 154:	1e 96       	adiw	r26, 0x0e	; 14
 156:	ea e6       	ldi	r30, 0x6A	; 106
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	81 50       	subi	r24, 0x01	; 1
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xa6>
 164:	1c 8a       	std	Y+20, r1	; 0x14
 166:	1d 8a       	std	Y+21, r1	; 0x15
 168:	1e 8a       	std	Y+22, r1	; 0x16
 16a:	1f 8a       	std	Y+23, r1	; 0x17
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0

int i=0,j=0;
while(s[i]!='\0')
 170:	de 01       	movw	r26, r28
 172:	14 96       	adiw	r26, 0x04	; 4
{
data(t[i]);
 174:	be 01       	movw	r22, r28
 176:	6f 5f       	subi	r22, 0xFF	; 255
 178:	7f 4f       	sbci	r23, 0xFF	; 255
_delay_ms(1);
}
void data(unsigned char a)
{
PORTB=a;
PORTD=0x05;
 17a:	05 e0       	ldi	r16, 0x05	; 5
 17c:	48 eb       	ldi	r20, 0xB8	; 184
 17e:	5b e0       	ldi	r21, 0x0B	; 11
_delay_ms(1);
PORTD=0x01;
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	0f c0       	rjmp	.+30     	; 0x1a2 <main+0xec>
char d[10]="1,2,3";

int i=0,j=0;
while(s[i]!='\0')
{
data(t[i]);
 184:	fb 01       	movw	r30, r22
 186:	e2 0f       	add	r30, r18
 188:	f3 1f       	adc	r31, r19
 18a:	80 81       	ld	r24, Z
PORTD=0x00;
_delay_ms(1);
}
void data(unsigned char a)
{
PORTB=a;
 18c:	88 bb       	out	0x18, r24	; 24
PORTD=0x05;
 18e:	02 bb       	out	0x12, r16	; 18
 190:	ca 01       	movw	r24, r20
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0xdc>
_delay_ms(1);
PORTD=0x01;
 196:	12 bb       	out	0x12, r17	; 18
 198:	ca 01       	movw	r24, r20
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0xe4>

int i=0,j=0;
while(s[i]!='\0')
{
data(t[i]);
i++;
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
itoa(e,t,10);
char s[10]="welcome";
char d[10]="1,2,3";

int i=0,j=0;
while(s[i]!='\0')
 1a2:	fd 01       	movw	r30, r26
 1a4:	e2 0f       	add	r30, r18
 1a6:	f3 1f       	adc	r31, r19
 1a8:	80 81       	ld	r24, Z
 1aa:	88 23       	and	r24, r24
 1ac:	59 f7       	brne	.-42     	; 0x184 <main+0xce>
 1ae:	88 e8       	ldi	r24, 0x88	; 136
 1b0:	93 e1       	ldi	r25, 0x13	; 19
 1b2:	2c e2       	ldi	r18, 0x2C	; 44
 1b4:	31 e0       	ldi	r19, 0x01	; 1
 1b6:	f9 01       	movw	r30, r18
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <main+0x102>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <main+0x100>
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 1c4:	94 e0       	ldi	r25, 0x04	; 4
 1c6:	92 bb       	out	0x12, r25	; 18
 1c8:	28 eb       	ldi	r18, 0xB8	; 184
 1ca:	3b e0       	ldi	r19, 0x0B	; 11
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x118>
_delay_ms(1);
PORTD=0x00;
 1d2:	12 ba       	out	0x12, r1	; 18
 1d4:	f9 01       	movw	r30, r18
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <main+0x120>
#include<avr/delay.h>
#include<stdlib.h>
#include<stdio.h>
void cmd(unsigned char a)
{
PORTB=a;
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	88 bb       	out	0x18, r24	; 24
PORTD=0x04;
 1de:	92 bb       	out	0x12, r25	; 18
 1e0:	c9 01       	movw	r24, r18
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <main+0x12c>
_delay_ms(1);
PORTD=0x00;
 1e6:	12 ba       	out	0x12, r1	; 18
 1e8:	c9 01       	movw	r24, r18
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <main+0x134>
 1ee:	fe 01       	movw	r30, r28
 1f0:	3e 96       	adiw	r30, 0x0e	; 14
_delay_ms(1);
}
void data(unsigned char a)
{
PORTB=a;
PORTD=0x05;
 1f2:	55 e0       	ldi	r21, 0x05	; 5
_delay_ms(1);
PORTD=0x01;
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <main+0x154>
PORTD=0x00;
_delay_ms(1);
}
void data(unsigned char a)
{
PORTB=a;
 1f8:	88 bb       	out	0x18, r24	; 24
PORTD=0x05;
 1fa:	52 bb       	out	0x12, r21	; 18
 1fc:	c9 01       	movw	r24, r18
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x148>
_delay_ms(1);
PORTD=0x01;
 202:	42 bb       	out	0x12, r20	; 18
 204:	c9 01       	movw	r24, r18
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x150>
i++;
}
_delay_ms(500);
cmd(0x01);
cmd(0xc0);
while(d[j]!='\0')
 20a:	81 91       	ld	r24, Z+
 20c:	88 23       	and	r24, r24
 20e:	a1 f7       	brne	.-24     	; 0x1f8 <main+0x142>
{
data(d[j]);
j++;
}
 210:	67 96       	adiw	r28, 0x17	; 23
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	f8 94       	cli
 216:	de bf       	out	0x3e, r29	; 62
 218:	0f be       	out	0x3f, r0	; 63
 21a:	cd bf       	out	0x3d, r28	; 61
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <itoa>:
 226:	fb 01       	movw	r30, r22
 228:	9f 01       	movw	r18, r30
 22a:	e8 94       	clt
 22c:	42 30       	cpi	r20, 0x02	; 2
 22e:	c4 f0       	brlt	.+48     	; 0x260 <itoa+0x3a>
 230:	45 32       	cpi	r20, 0x25	; 37
 232:	b4 f4       	brge	.+44     	; 0x260 <itoa+0x3a>
 234:	4a 30       	cpi	r20, 0x0A	; 10
 236:	29 f4       	brne	.+10     	; 0x242 <itoa+0x1c>
 238:	97 fb       	bst	r25, 7
 23a:	1e f4       	brtc	.+6      	; 0x242 <itoa+0x1c>
 23c:	90 95       	com	r25
 23e:	81 95       	neg	r24
 240:	9f 4f       	sbci	r25, 0xFF	; 255
 242:	64 2f       	mov	r22, r20
 244:	77 27       	eor	r23, r23
 246:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodhi4>
 24a:	80 5d       	subi	r24, 0xD0	; 208
 24c:	8a 33       	cpi	r24, 0x3A	; 58
 24e:	0c f0       	brlt	.+2      	; 0x252 <itoa+0x2c>
 250:	89 5d       	subi	r24, 0xD9	; 217
 252:	81 93       	st	Z+, r24
 254:	cb 01       	movw	r24, r22
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	a1 f7       	brne	.-24     	; 0x242 <itoa+0x1c>
 25a:	16 f4       	brtc	.+4      	; 0x260 <itoa+0x3a>
 25c:	5d e2       	ldi	r21, 0x2D	; 45
 25e:	51 93       	st	Z+, r21
 260:	10 82       	st	Z, r1
 262:	c9 01       	movw	r24, r18
 264:	0c 94 34 01 	jmp	0x268	; 0x268 <strrev>

00000268 <strrev>:
 268:	dc 01       	movw	r26, r24
 26a:	fc 01       	movw	r30, r24
 26c:	67 2f       	mov	r22, r23
 26e:	71 91       	ld	r23, Z+
 270:	77 23       	and	r23, r23
 272:	e1 f7       	brne	.-8      	; 0x26c <strrev+0x4>
 274:	32 97       	sbiw	r30, 0x02	; 2
 276:	04 c0       	rjmp	.+8      	; 0x280 <strrev+0x18>
 278:	7c 91       	ld	r23, X
 27a:	6d 93       	st	X+, r22
 27c:	70 83       	st	Z, r23
 27e:	62 91       	ld	r22, -Z
 280:	ae 17       	cp	r26, r30
 282:	bf 07       	cpc	r27, r31
 284:	c8 f3       	brcs	.-14     	; 0x278 <strrev+0x10>
 286:	08 95       	ret

00000288 <__udivmodhi4>:
 288:	aa 1b       	sub	r26, r26
 28a:	bb 1b       	sub	r27, r27
 28c:	51 e1       	ldi	r21, 0x11	; 17
 28e:	07 c0       	rjmp	.+14     	; 0x29e <__udivmodhi4_ep>

00000290 <__udivmodhi4_loop>:
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	a6 17       	cp	r26, r22
 296:	b7 07       	cpc	r27, r23
 298:	10 f0       	brcs	.+4      	; 0x29e <__udivmodhi4_ep>
 29a:	a6 1b       	sub	r26, r22
 29c:	b7 0b       	sbc	r27, r23

0000029e <__udivmodhi4_ep>:
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	5a 95       	dec	r21
 2a4:	a9 f7       	brne	.-22     	; 0x290 <__udivmodhi4_loop>
 2a6:	80 95       	com	r24
 2a8:	90 95       	com	r25
 2aa:	bc 01       	movw	r22, r24
 2ac:	cd 01       	movw	r24, r26
 2ae:	08 95       	ret

000002b0 <_exit>:
 2b0:	f8 94       	cli

000002b2 <__stop_program>:
 2b2:	ff cf       	rjmp	.-2      	; 0x2b2 <__stop_program>
