
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000894  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000070a  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 
#define F_CPU	4000000UL
#include <util/delay.h>
 
int main(void)
{
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
	DDRA = 0xFF;	// Configure port B as output
  70:	8f ef       	ldi	r24, 0xFF	; 255
  72:	8a bb       	out	0x1a, r24	; 26
 
    while(1)
    {
        //TODO:: Please write your application code
 
		PORTA = 0b00110000;		// Display Number 1
  74:	00 e3       	ldi	r16, 0x30	; 48
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  76:	24 e6       	ldi	r18, 0x64	; 100
  78:	30 e0       	ldi	r19, 0x00	; 0
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01011011;		// Display Number 2
  7a:	1b e5       	ldi	r17, 0x5B	; 91
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01001111;		// Display Number 3
  7c:	bf e4       	ldi	r27, 0x4F	; 79
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01100110;		// Display Number 4
  7e:	a6 e6       	ldi	r26, 0x66	; 102
		_delay_ms(1000);		// Wait for 1s
 
		PORTA = 0b01110111;		// Display Letter A
  80:	77 e7       	ldi	r23, 0x77	; 119
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b00111001;		// Display Letter C
  82:	69 e3       	ldi	r22, 0x39	; 57
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01111001;		// Display Letter E
  84:	59 e7       	ldi	r21, 0x79	; 121
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01110001;		// Display Letter F
  86:	41 e7       	ldi	r20, 0x71	; 113
 
    while(1)
    {
        //TODO:: Please write your application code
 
		PORTA = 0b00110000;		// Display Number 1
  88:	0b bb       	out	0x1b, r16	; 27
  8a:	80 e1       	ldi	r24, 0x10	; 16
  8c:	97 e2       	ldi	r25, 0x27	; 39
  8e:	f9 01       	movw	r30, r18
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  94:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  96:	d9 f7       	brne	.-10     	; 0x8e <main+0x22>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01011011;		// Display Number 2
  98:	1b bb       	out	0x1b, r17	; 27
  9a:	80 e1       	ldi	r24, 0x10	; 16
  9c:	97 e2       	ldi	r25, 0x27	; 39
  9e:	f9 01       	movw	r30, r18
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <main+0x32>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01001111;		// Display Number 3
  a8:	bb bb       	out	0x1b, r27	; 27
  aa:	80 e1       	ldi	r24, 0x10	; 16
  ac:	97 e2       	ldi	r25, 0x27	; 39
  ae:	f9 01       	movw	r30, r18
  b0:	31 97       	sbiw	r30, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b6:	d9 f7       	brne	.-10     	; 0xae <main+0x42>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01100110;		// Display Number 4
  b8:	ab bb       	out	0x1b, r26	; 27
  ba:	80 e1       	ldi	r24, 0x10	; 16
  bc:	97 e2       	ldi	r25, 0x27	; 39
  be:	f9 01       	movw	r30, r18
  c0:	31 97       	sbiw	r30, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c6:	d9 f7       	brne	.-10     	; 0xbe <main+0x52>
		_delay_ms(1000);		// Wait for 1s
 
		PORTA = 0b01110111;		// Display Letter A
  c8:	7b bb       	out	0x1b, r23	; 27
  ca:	80 e1       	ldi	r24, 0x10	; 16
  cc:	97 e2       	ldi	r25, 0x27	; 39
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <main+0x62>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b00111001;		// Display Letter C
  d8:	6b bb       	out	0x1b, r22	; 27
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	f9 01       	movw	r30, r18
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e6:	d9 f7       	brne	.-10     	; 0xde <main+0x72>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01111001;		// Display Letter E
  e8:	5b bb       	out	0x1b, r21	; 27
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	97 e2       	ldi	r25, 0x27	; 39
  ee:	f9 01       	movw	r30, r18
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f6:	d9 f7       	brne	.-10     	; 0xee <main+0x82>
		_delay_ms(1000);		// Wait for 1s
		PORTA = 0b01110001;		// Display Letter F
  f8:	4b bb       	out	0x1b, r20	; 27
  fa:	80 e1       	ldi	r24, 0x10	; 16
  fc:	97 e2       	ldi	r25, 0x27	; 39
  fe:	f9 01       	movw	r30, r18
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <main+0x94>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 104:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 106:	d9 f7       	brne	.-10     	; 0xfe <main+0x92>
 108:	bf cf       	rjmp	.-130    	; 0x88 <main+0x1c>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
